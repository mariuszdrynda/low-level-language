use std::str::FromStr;
use crate::ast::AST;

grammar;

pub Top: Vec<Box<AST>> = {
    Global+ => <>,
} 

Global: Box<AST> = {
    Global_function,
    Function
}

Global_function: Box<AST> = <n:Global_function_name> "(" <a:Arguments<Argument>> ")"
    => Box::new(AST::FunctionCall(n, a));

Global_function_name: String = {
    <i:"declare_set_global"> => i.to_string(),
    <i:"include"> => i.to_string(),
    //TODO
}

Function: Box<AST> = "fn" <n:Name> "(" ")" "-" ">" <r:Returned_type> "{" <s:Statements> "}"
    => Box::new(AST::Function(n, r, s)); //todo

Statements: Vec<Box<AST>> = Statement+ => <>;

Statement: Box<AST> = {
    <f:Function_call> ";" => f,
    "loop" <n:Name> "{" <s:Statements> "}" => Box::new(AST::Loop(n, s)),
    "match" "(" <a:Arguments<Argument>> ")" "{" <c:Case_body> "}" => Box::new(AST::Match(a, c)),
};

Case_body: Vec<Box<AST>> = Case+ => <>;

Case: Box<AST> = {
    <a:Argument> "-" ">" "{" <s:Statements> "}" => Box::new(AST::Case(a, s)),
};

Function_call: Box<AST> = <n:Name> "(" <a:Arguments<Argument>> ")" => Box::new(AST::FunctionCall(n, a));

Arguments<T>: Vec<Box<AST>> = <v:(<T> ",")*> <e:T> => {
    let mut v = v;
    v.push(e);
    v
};

Argument: Box<AST> = {
    Int => Box::new(AST::Int(<>)),
    Name => Box::new(AST::Name(<>)),
    Function_call => <>,
    Float => Box::new(AST::Float(<>)),
    Char => Box::new(AST::Char(<>)),
    Str => Box::new(AST::Str(<>)),
    "true" => Box::new(AST::Boolean(true)),
    "false" => Box::new(AST::Boolean(false)),
    "(" ")" => Box::new(AST::Void),
};

Int: i64 = r"[0-9]+" => i64::from_str(<>).unwrap();

Name: String = <i:r"[_a-zA-Z][_a-zA-Z0-9]*"> => i.to_string();

Float: f64 = r"[0-9]+.[0-9]+" => f64::from_str(<>).unwrap();

Char: char = r"'.'" => '\0'; //todo

Str: String = <i:r#"".*""#> => i.to_string();

Returned_type: String = {
    "(" ")" => String::from("()"),
    Name => <>,
    //TODO
}

match {
    // "true",
    // "false",
    // "(",
    // ")",
    // r"''",
    r"[0-9]+.[0-9]+",
    // r"[_a-zA-Z][_a-zA-Z0-9]+", //+-*/&^%!#$.,?
    // r"\s*" => { },
    // r"//[^\n\r]*[\n\r]*" => { },
    // r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
} else {
    r"[0-9]+",
    _
}